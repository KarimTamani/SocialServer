let express,PORT,ApolloServer,Server,typeDefs,resolvers,directives,userAuth,makeExecutableSchema,db;_acf‍.w("express",[["default",["express"],function(v){express=v}]]);_acf‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}]]);_acf‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_acf‍.w("http",[["Server",["Server"],function(v){Server=v}]]);_acf‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}],["directives",["directives"],function(v){directives=v}]]);_acf‍.w("./middlewares",[["userAuth",["userAuth"],function(v){userAuth=v}]]);_acf‍.w("@graphql-tools/schema",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_acf‍.w("../models",[["default",["db"],function(v){db=v}]]);









// initialize our express server 
// init the Server 
const app = express();
const http = Server(app);

// aplaying middlewares
app.use(userAuth);

var schema = makeExecutableSchema({ typeDefs, resolvers })

schema = directives.userAuthDirective()(schema);


async function startServer() {

    const apolloServer = new ApolloServer({
        csrfPrevention: false,
        schema,
        context: ({ req }) => {
            const { isUserAuth, user } = req;
        
            return {
                db , 
                isUserAuth , 
                user 
            }
        }
    });

    await apolloServer.start();


    http.listen(PORT, async () => {
        try {
            // apply the apollo server as middleware 
            apolloServer.applyMiddleware({ app });
            // listen 


            console.log(`Server is runing on port ${PORT}`)
        } catch (error) {
            _acf‍.g.console.log("Error : ", error)
        }
    })

}

startServer();

