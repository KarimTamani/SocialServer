let express,PORT,ApolloServer,Server,typeDefs,resolvers,db;_49a‍.w("express",[["default",["express"],function(v){express=v}]]);_49a‍.w("./config",[["PORT",["PORT"],function(v){PORT=v}]]);_49a‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_49a‍.w("http",[["Server",["Server"],function(v){Server=v}]]);_49a‍.w("./graphql",[["typeDefs",["typeDefs"],function(v){typeDefs=v}],["resolvers",["resolvers"],function(v){resolvers=v}]]);_49a‍.w("../models",[["default",["db"],function(v){db=v}]]); 



 
 



// initialize our express server 
// init the Server 
const app = express();
const http = Server(app);


async function startServer() {

    const apolloServer = new ApolloServer({
        csrfPrevention: false,
        typeDefs , 
        resolvers , 
        playground : true , 
        context : ({ req }) => { 
            return { 
                db 
            }
        }
    });

    await apolloServer.start();


    http.listen(PORT, async () => {
        try {
            // apply the apollo server as middleware 
            apolloServer.applyMiddleware({ app });
            // listen 


            console.log(`Server is runing on port ${PORT}`)
        } catch (error) {
            _49a‍.g.console.log("Error : ", error)
        }
    })

}

startServer();

