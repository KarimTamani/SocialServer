let JWT_SECRET,verify,db;_eb2‍.x([["userAuth",()=>userAuth]]);_eb2‍.w("../config",[["JWT_SECRET",["JWT_SECRET"],function(v){JWT_SECRET=v}]]);_eb2‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_eb2‍.w("../../models",[["default",["db"],function(v){db=v}]]);




       const userAuth = async (request, response, next) => {

    const token = request.get('Authorization');

    // check if there is a token in http request header
    if (!token || token.trim() == "") {
       
        request.isUserAuth = false;
        return next();
    }


    let decodedToken = null;
    // decode token 
    try {
        decodedToken = await verify(token, JWT_SECRET);
    } catch (error) {
        request.isUserAuth = false;
        return next();
    }
    // if the decode token is not valid set auth to false move to next middleware 
    if (!decodedToken) {
        request.isUserAuth = false;
        return next();
    }
 
    // check if realy this token belongs to a valid doctor 
    var user = await db.User.findOne({
        where: {
            "email": decodedToken.identifier,
            "password": decodedToken.password
        }
    });

    // check if there is a valid user 
    if (!user) {
        request.isUserAuth = false;
        return next();
    }
    
    // assing the user and validation to the request 
    request.user = user ; 
    request.isUserAuth = true  ; 

    return next() ; 
 

}