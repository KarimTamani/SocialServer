let GraphQLSchema,defaultFieldResolver,mapSchema,getDirective,MapperKind,ApolloError;_0c7‍.x([["userAuthDirective",()=>userAuthDirective]]);_0c7‍.w("graphql",[["GraphQLSchema",["GraphQLSchema"],function(v){GraphQLSchema=v}],["defaultFieldResolver",["defaultFieldResolver"],function(v){defaultFieldResolver=v}]]);_0c7‍.w("@graphql-tools/utils",[["mapSchema",["mapSchema"],function(v){mapSchema=v}],["getDirective",["getDirective"],function(v){getDirective=v}],["MapperKind",["MapperKind"],function(v){MapperKind=v}]]);_0c7‍.w("apollo-server-express",[["ApolloError",["ApolloError"],function(v){ApolloError=v}]]);



       function userAuthDirective() {
 
  return schema =>
    mapSchema(schema, {
      [MapperKind.OBJECT_FIELD]: fieldConfig => {

        const directive = getDirective(schema, fieldConfig, "userAuth")

        if (directive) {

          const { resolve = defaultFieldResolver } = fieldConfig

          return {
            ...fieldConfig,
            resolve: async function (source, args, context, info) {
              if (context.isUserAuth == false) {

                throw new ApolloError("Unauthorized", 403);
              }

              return await resolve(source, args, context, info);
            }
          }
        }
      }
    })
}